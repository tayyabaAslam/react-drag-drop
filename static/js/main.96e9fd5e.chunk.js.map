{"version":3,"sources":["constants.js","buttons-state.js","components/draggable-button/draggable-button.js","components/dropable-row/dropable-row.js","components/column/column.js","components/main-page/main-page.js","index.js"],"names":["ButtonPosition","LEFT","RIGHT","NONE","leftButtons","rightButtons","buttons","observer","emitChange","moveButton","toIndex","fromIndex","toColumn","fromColumn","column","buttonToMove","Object","assign","array","i","length","splice","toString","reArrangeButtons","DraggableButton","props","state","isModalOpen","this","showButton","button","isDragging","index","connectDragSource","style","opacity","cursor","paddingLeft","height","backgroundColor","paddingBottom","borderRadius","onClick","setState","className","isOpen","startText","endText","startPlaceholder","endPlaceholder","React","Component","DragSource","beginDrag","monitor","component","type","connect","dragSource","DropAbleRow","children","useDrop","accept","drop","item","collect","isOver","ref","Column","buttonPositions","totalRows","isLeft","showPopUp","loopCount","items","push","renderRow","heading","autoHeight","autoHeightMin","autoHeightMax","autoHide","autoHideTimeout","autoHideDuration","rowIndex","key","MainPage","backend","HTML5Backend","console","log","trigger","position","root","document","getElementById","o","Error","observe","ReactDOM","render"],"mappings":"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","file":"static/js/main.96e9fd5e.chunk.js","sourcesContent":["export const ButtonPosition = {\n    LEFT: 'left',\n    RIGHT: 'right',\n    NONE: 'none'\n}","import {ButtonPosition} from './constants'\nlet leftButtons = ['Appointment 1']\nlet rightButtons = ['Appointment 2', 'Appointment 6', 'Appointment 3', 'Appointment 5', 'Appointment 4', 'Appointment 7', 'Blank Appointment']\nlet buttons = {leftButtons: leftButtons, rightButtons: rightButtons}\nlet draggedIndex = null\nlet observer = null\n\nfunction emitChange() {\n    observer(buttons)\n}\n\nfunction reArrangeButtons (column, fromIndex, toIndex) {\n    let buttons = column === ButtonPosition.LEFT ? leftButtons : rightButtons\n    let buttonToMove = Object.assign(buttons[fromIndex])\n    let array = [...buttons]\n    if(fromIndex > toIndex) {\n        for (let i=toIndex; i<fromIndex; i++) {\n            buttons[i+1] = array[i]\n        }\n    }\n    if(fromIndex<toIndex) {\n        for (let i=fromIndex; i<toIndex; i++) {\n            if (i+1 < buttons.length) {\n                buttons[i] = array[i + 1]\n            } else {\n                buttons.splice(i, 1)\n            }\n        }\n    }\n    if (toIndex < buttons.length) {\n        buttons[toIndex] = buttonToMove.toString()\n    } else {\n        buttons.splice(toIndex, 0, buttonToMove.toString())\n    }\n}\n\nexport function observe(o) {\n    if (observer) {\n        throw new Error('Multiple observers not implemented.')\n    }\n\n    observer = o\n    emitChange()\n}\n\nexport function moveButton(toIndex, fromIndex, toColumn, fromColumn) {\n    if (toColumn === fromColumn) {\n        //NOTE:- When swapping is in same column\n        reArrangeButtons(fromColumn, fromIndex, toIndex)\n    } else {\n        if (fromColumn === ButtonPosition.RIGHT && toColumn === ButtonPosition.LEFT) {\n            //NOTES:- When swapping from right to left\n            leftButtons.splice(toIndex, 0, rightButtons[fromIndex])\n            rightButtons.splice(fromIndex, 1)\n        } else if (fromColumn === ButtonPosition.LEFT && toColumn === ButtonPosition.RIGHT) {\n            //NOTES:- When swapping from left to right\n            rightButtons.splice(toIndex, 0, leftButtons[fromIndex])\n            leftButtons.splice(fromIndex, 1)\n        }\n    }\n    emitChange()\n}","import React from 'react';\nimport { DragSource } from 'react-dnd'\nimport './draggable-button.css'\nimport Modal from \"react-modal\"\nimport { RangeDatePicker } from '@y0c/react-datepicker'\nimport '@y0c/react-datepicker/assets/styles/calendar.scss'\nimport 'moment/locale/ko'\n// import \"../../../node_modules/@y0c/react-datepicker/assets/styles/_mixin.scss\";\n\nconst appointmentSource = {\n    beginDrag(props, monitor, component) {\n        const item = { type: 'button', index: props.index, column: props.column }\n        return item\n    },\n}\n\nfunction collect(connect, monitor) {\n    return {\n        // Call this function inside render()\n        // to let React DnD handle the drag events:\n        connectDragSource: connect.dragSource(),\n        // You can ask the monitor about the current drag state:\n        isDragging: monitor.isDragging(),\n    }\n}\n\nclass DraggableButton extends React.Component {\n\n    constructor (props) {\n        super(props)\n        this.state = {\n            isModalOpen: false\n        };\n    }\n\n    render ()\n    {\n        const {showButton, button, index, isDragging, connectDragSource} = this.props\n\n        return connectDragSource(\n            <div>\n                {\n                    showButton &&\n                    <div style={{\n                        opacity: isDragging ? 0.5 : 1,\n                        cursor: 'move',\n                        paddingLeft: 5,\n                        height: 65,\n                        backgroundColor: 'white',\n                        paddingBottom: 10,\n                        borderRadius: 5}}\n                         onClick={() => this.setState({\n                             isModalOpen: true\n                         })}\n                    >\n                        <h2 className='appointment-heading'>{ button }</h2>\n                        <h4 className='appointment-detail'>Click to set date</h4>\n                    </div>\n                }\n                <Modal\n                    isOpen={this.state.isModalOpen}\n                    className=\"Modal\"\n                    // overlayClassName=\"Overlay\"\n                >\n                    <h2>{button}</h2>\n                    <form>\n                        <RangeDatePicker className='formInput'\n                                         startText=\"Start\"\n                                         endText=\"End\"\n                                         startPlaceholder=\"Start Date\"\n                                         endPlaceholder=\"End Date\"/>\n                    </form>\n                    <button className='formButton' onClick={() => this.setState({\n                        isModalOpen: false\n                    })}>\n                        Submit\n                    </button>\n                    <button className='formButton' onClick={() => this.setState({\n                        isModalOpen: false\n                    })}>\n                        Cancel\n                    </button>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default DragSource('button', appointmentSource, collect)(DraggableButton)","import React from 'react';\nimport { useDrop } from 'react-dnd'\nimport {moveButton} from '../../buttons-state'\nimport './dropable-row.css'\n\nfunction DropAbleRow({ index, children, button, column }) {\n    const [{ isOver }, drop] = useDrop({\n        accept: 'button',\n        drop: (item) => moveButton(index, item.index, column, item.column),\n        collect: monitor => ({\n            isOver: !!monitor.isOver()\n        }),\n    })\n\n    return (\n        <div ref={drop} className='container'>\n            {children}\n        </div>\n    )\n}\n\nexport default DropAbleRow","import React from 'react';\nimport DraggableButton from '../draggable-button/draggable-button'\nimport DropAbleRow from '../dropable-row/dropable-row'\nimport './column.css'\nimport { ButtonPosition } from '../../constants'\nimport FreeScrollBar from 'react-free-scrollbar'\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport {useDrop} from \"react-dnd\";\nimport {moveButton, moveButtonAtEnd} from \"../../buttons-state\";\n\nexport default function Column({ buttonPositions, totalRows, isLeft, showPopUp}) {\n\n    const loopCount = totalRows < 7 ? 7: totalRows\n    let items = []\n    for (let i=0; i<loopCount; i++) {\n        items.push(renderRow(i, buttonPositions, isLeft, totalRows, showPopUp))\n    }\n    const heading = isLeft ? 'Treatment plan' : 'Appointment types'\n    return (\n\n        <div className=\"column-container\" >\n            <h1 className='column-heading'>{heading}</h1>\n            <Scrollbars className=\"appointments-container\" autoHeight\n                        autoHeightMin={500}\n                        autoHeightMax={500}\n                        autoHide\n                        autoHideTimeout={10}\n                        autoHideDuration={1000}>\n                {items}\n            </Scrollbars>\n        </div>\n    );\n}\n\nfunction renderRow(rowIndex, buttonPositions, isLeft, totalRows, showPopUp) {\n    const column = isLeft ? ButtonPosition.LEFT : ButtonPosition.RIGHT\n    const showButton = rowIndex < totalRows\n    return (\n        <div key={rowIndex} className='row'>\n            <DropAbleRow index={rowIndex} button={buttonPositions[rowIndex]} column={column} showButton={showButton}>\n                <DraggableButton showButton={showButton}\n                                 index={rowIndex}\n                                 button={buttonPositions[rowIndex]}\n                                 column={column}\n                                 showPopUp={showPopUp}/>\n            </DropAbleRow>\n        </div>\n    )\n}","import React from 'react';\nimport './main-page.css'\nimport Column from '../column/column'\nimport { DndProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport Popup from \"reactjs-popup\";\nimport Modal from 'react-modal';\n\nexport default function MainPage({leftButtons, rightButtons, totalRows}){\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div className=\"drag-drop-react\">\n                <Column buttonPositions={leftButtons} totalRows={leftButtons.length} isLeft={true} showPopUp={showPopUp}/>\n                <div className='space'></div>\n                <Column buttonPositions={rightButtons} totalRows={rightButtons.length} isLeft={false}/>\n            </div>\n\n        </DndProvider>\n    );\n}\n\nfunction showPopUp () {\n    console.log('lalalalalalalal land')\n    return (\n        <Popup trigger={<button> Trigger</button>} position=\"right center\">\n            <div>Popup content here !!</div>\n        </Popup>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport {observe} from './buttons-state'\nimport MainPage from './components/main-page/main-page'\n\nconst root = document.getElementById('root')\n\nobserve(buttons =>\n    ReactDOM.render(<MainPage leftButtons={buttons.leftButtons} rightButtons={buttons.rightButtons}  totalRows={8}/>, root),\n)"],"sourceRoot":""}